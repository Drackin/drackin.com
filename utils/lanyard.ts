export const useLanyard = ({ userId, onUpdate }: { userId: string, onUpdate: (cb: LanyardData) => void }) => {
    let loading = ref(true)
    let status = ref({})
    const socket = new WebSocket("wss://api.lanyard.rest/socket")
    loading.value = true


    socket.addEventListener("open", () => {
        socket.send(JSON.stringify({
            op: 2,
            d: {
                subscribe_to_id: userId,
            }
        }))


        setInterval(() => {
            socket.send(JSON.stringify({ op: 3 }))
        }, 30000)
    })

    socket.addEventListener("message", ({ data }) => {
        const { t, d } = JSON.parse(data) as {
            t: "INIT_STATE" | "PRESENCE_UPDATE";
            d: any;
        }

        if(t === "INIT_STATE" || t === "PRESENCE_UPDATE") {
            if(loading) loading.value = false;
            status.value = d;
            onUpdate(d)
        }
    })

    socket.addEventListener("error", (error) => {console.log(error)})

    socket.addEventListener("close", (event) => console.log(event))

    return { loading, status }
}

/* Module options */
export interface VueLanyardOptions {
    userId: string | string[];
    socket?: boolean;
  }
  
  /* Response object, auto-generated by JSON to TS extension */
  export interface LanyardResponse {
    success: boolean;
    data: LanyardData;
    error?: LanyardError;
  }
  
  export interface LanyardError {
    message: string;
    code: string;
  }
  
  export interface LanyardData {
    spotify: Spotify | null;
    discord_user: Discorduser;
    discord_status: "online" | "idle" | "dnd" | "offline";
    activities: Activity[];
    listening_to_spotify: boolean;
    kv?: Kv;
    active_on_discord_mobile: boolean;
    active_on_discord_desktop: boolean;
  }
  
  export interface Kv {
    [key: string]: string;
  }
  
  export interface Spotify {
    track_id: string;
    timestamps: Timestamps;
    song: string;
    artist: string;
    album_art_url: string;
    album: string;
  }
  
  export interface Timestamps {
    start: number;
    end?: number;
  }
  
  export interface Activity {
    type: number;
    state: string;
    name: string;
    id: string;
    emoji?: Emoji;
    created_at: number;
    application_id?: string | null;
    timestamps?: Timestamps;
    session_id?: string;
    details?: string;
    buttons?: string[];
    assets?: Assets;
  }
  
  export interface Assets {
    small_text?: string;
    small_image?: string;
    large_text: string;
    large_image: string;
  }
  
  export interface Timestamps {
    start: number;
    end?: number;
  }
  
  export interface Emoji {
    name: string;
    id?: string;
    animated?: boolean;
  }
  
  export interface Discorduser {
    username: string;
    public_flags?: number;
    id: string;
    discriminator: string;
    avatar: string | null;
  }